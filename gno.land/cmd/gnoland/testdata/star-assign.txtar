loadpkg gno.land/p/demo/ufmt

gnoland start

# add contract
gnokey maketx addpkg -pkgdir $WORK -pkgpath gno.land/r/demo/xx -gas-fee 1000000ugnot -gas-wanted 2000000 -broadcast -chainid=tendermint_test test1
stdout OK!

# execute New
gnokey maketx call -pkgpath gno.land/r/demo/xx -func New -gas-fee 1000000ugnot -gas-wanted 2000000 -broadcast -chainid=tendermint_test test1
stdout OK!

gnokey maketx call -pkgpath gno.land/r/demo/xx -func Delta -gas-fee 1000000ugnot -gas-wanted 2000000 -broadcast -chainid=tendermint_test test1
stdout OK!

gnokey maketx call -pkgpath gno.land/r/demo/xx -func Values -gas-fee 1000000ugnot -gas-wanted 2000000 -broadcast -chainid=tendermint_test test1
stdout '("1, hello, 100, 100, 8, 5, 8" string)'
stdout OK!

-- realm.gno --
package xx

import (
	"gno.land/p/demo/ufmt"
)

type A struct {
	nums []int
}

var (
	intPtr *int
	strPtr *string
	aPtr *A
	concretePtr *int
	concreteValue int
)

func New() {
	intPtr = new(int)
	strPtr = new(string)
	aPtr = &A{}
	concretePtr = &concreteValue
}

func Delta() {
	*intPtr++
	*strPtr += "hello"
	*aPtr = A{nums: []int{8, 5, 8}}
	*concretePtr = 100
}

func Values() string {
	var results string
	results += ufmt.Sprintf("%d, %s, %d, %d", *intPtr, *strPtr, *concretePtr, concreteValue)
	for _, n := range aPtr.nums {
		results += ufmt.Sprintf(", %d", n)
	}
	
	return results
}
