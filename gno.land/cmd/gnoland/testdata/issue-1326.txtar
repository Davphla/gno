gnoland start

# add contract
gnokey maketx addpkg -pkgdir $WORK -pkgpath gno.land/r/demo/xx -gas-fee 1000000ugnot -gas-wanted 2000000 -broadcast -chainid=tendermint_test test1
stdout OK!

# execute New
gnokey maketx call -pkgpath gno.land/r/demo/xx -func New -gas-fee 1000000ugnot -gas-wanted 2000000 -broadcast -chainid=tendermint_test test1
stdout OK!

# execute Delta for the first time
gnokey maketx call -pkgpath gno.land/r/demo/xx -func Delta -gas-fee 1000000ugnot -gas-wanted 2000000 -broadcast -chainid=tendermint_test test1
stdout '("1,1,1;" string)'
stdout OK!

gnokey maketx call -pkgpath gno.land/r/demo/xx -func Delta -gas-fee 1000000ugnot -gas-wanted 2000000 -broadcast -chainid=tendermint_test test1
stdout '("1,1,1;2,2,2;" string)'
stdout OK!

-- realm.gno --
package xx

import (
	"strconv"
)

type Move struct {
	N1, N2, N3 byte
}

type S struct {
	Moves []Move
}

func (s S) clone() S {
	mv := s.Moves
	return S{Moves: mv}
}

func (olds S) change() S {
	s := olds.clone()

	counter++
	s.Moves = append([]Move{}, s.Moves...)
	s.Moves = append(s.Moves, Move{counter, counter, counter})
	return s
}

var el *S
var counter byte

func New() {
	el = new(S)
}

func Delta() string {
	n := el.change()
	*el = n
	return Values()
}

func Values() string {
	s := ""
	for _, val := range el.Moves {
		s += strconv.Itoa(int(val.N1)) + "," + strconv.Itoa(int(val.N2)) + "," + strconv.Itoa(int(val.N3)) + ";"
	}
	return s
}
