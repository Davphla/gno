// This file is autogenerated; do not edit.
// To regenerate it, run `go generate` or `go run ./internal/stdgen`
// from @/stdlibs.

package stdlibs

import (
	"reflect"

	gno "github.com/gnolang/gno/gnovm/pkg/gnolang"
{{- range $i, $m := .LibNums }}
	lib{{ $i }} {{ printf "%q" $m }}
{{- end }}
)

var nativeFuncs = [...]nativeFunc{
{{- range $i, $m := .Mappings }}
	{
		{{ printf "%q" $m.GnoImportPath }},
		{{ printf "%q" $m.GnoMethod }},
		{{/*- TODO set nil if empty -*/}}
		[]gno.FieldTypeExpr{
		{{- range $i, $p := $m.GnoParamTypes }}
			{Name: gno.N("p{{ $i }}"), Type: gno.X({{ printf "%q" $p }})},
		{{- end }}
		},
		[]gno.FieldTypeExpr{
		{{- range $i, $r := $m.GnoResultTypes }}
			{Name: gno.N("r{{ $i }}"), Type: gno.X({{ printf "%q" $r }})},
		{{- end }}
		},
		func(m *gno.Machine) {
			{{ if $m.GnoParamTypes -}}
				b := m.LastBlock()
				var (
				{{- range $pn, $pv := $m.GnoParamTypes }}
					p{{ $pn }} {{ $pv }}
					rp{{ $pn }} = reflect.ValueOf(&p{{ $pn }}).Elem()
				{{- end }}
				)

				{{ range $pn, $pv := $m.GnoParamTypes -}}
				gno.Gno2GoValue(b.GetPointerTo(nil, gno.NewValuePathBlock(1, {{ $pn }}, "")).TV, rp{{ $pn }})
				{{ end }}
			{{- end }}

			{{ range $rn, $rv := $m.GnoResultTypes -}}
				{{- if gt $rn 0 -}}, {{ end -}}
				r{{ $rn }}
			{{- end -}}
			{{- if gt (len $m.GnoResultTypes) 0 }} := {{ end -}}
			lib{{ $.FindLibNum $m.GoImportPath }}.{{ $m.GoFunc }}(
				{{- if $m.MachineParam }}
					m,
				{{ end -}}
				{{- range $pn, $pv := $m.GnoParamTypes -}}
					p{{ $pn }},
				{{- end -}}
			)

			{{ range $rn, $rv := $m.GnoResultTypes -}}
			m.PushValue(gno.Go2GnoValue(
				m.Alloc,
				m.Store,
				reflect.ValueOf(&r{{ $rn }}).Elem(), {{- /* necessary to support interfaces (ie. error) */}}
			))
			{{ end }}
		},
	},
{{- end }}
}
