# Test recovering

! gno test -v -run 'TestBadRecover$' .

! stdout .+
! stderr 'recovered bad panic!'

gno test -v -run 'TestRecoverSkip1$' .

! stdout .+
stderr 'skipped'
! stderr 'after skipped'
stderr '--- SKIP'
stderr 'ok  '

gno test -v -run 'TestRecoverSkip2$' .

! stdout .+
# should contain warning about using testing.Recover
stderr 'skipped'
! stderr 'after skipped'
# the test will still be marked as skipped
stderr '--- SKIP'
stderr 'ok  '

-- recov.gno --
package recov

-- recov_test.gno --
package recov

import "testing"

type RecoverySetter struct {
	value interface{}
}

func (s *RecoverySetter) Set(v interface{}) {
	s.value = v
}

func TestBadRecover(t *testing.T) {
	var setter RecoverySetter
	defer func() {
		t.Log("recovered", setter.value)
	}()
	//  not recovering
	//  unhandled panic error
	defer testing.Recover(&setter)

	panic("bad panic!")
}

func TestRecoverSkip1(t *testing.T) {
	var setter RecoverySetter
	defer func() {
		t.Log("recovered", setter.value)
	}()
	defer testing.Recover(&setter)

	t.Skip("skipped")
	t.Log("after skipped")
	panic("bad panic!")
}

func TestRecoverSkip2(t *testing.T) {
	defer func() {
		err := recover()
		t.Log("recovered", err)
	}()

	t.Skip("skipped")
	t.Log("after skipped")
	panic("bad panic!")
}