// Package transpiler implements a source-to-source compiler for translating Gno
// code into Go code.
package transpiler

import (
	"bytes"
	"fmt"
	"go/ast"
	"go/format"
	"go/parser"
	goscanner "go/scanner"
	"go/token"
	"os"
	"os/exec"
	"path/filepath"
	"regexp"
	"sort"
	"strconv"
	"strings"

	"go.uber.org/multierr"
	"golang.org/x/tools/go/ast/astutil"

	"github.com/gnolang/gno/gnovm/pkg/gnoenv"
	"github.com/gnolang/gno/tm2/pkg/std"
)

// ImportPrefix is the import path to the root of the gno repository, which should
// be used to create go import paths.
const ImportPrefix = "github.com/gnolang/gno"

// TranspileImportPath takes an import path s, and converts it into the full
// import path relative to the Gno repository.
func TranspileImportPath(s string) string {
	return ImportPrefix + "/" + packageDirLocation(s)
}

// IsStdlib determines whether s is a pkgpath for a standard library.
func IsStdlib(s string) bool {
	// NOTE(morgan): this is likely to chagne in the future as we add support for
	// IBC/ICS and we allow import paths to other chains. It might be good to
	// follow the same rule as Go, which is: does the first element of the
	// import path contain a dot?
	return !strings.HasPrefix(s, "gno.land/")
}

// packageDirLocation provides the supposed directory of the package, relative to the root dir.
func packageDirLocation(s string) string {
	switch {
	case !IsStdlib(s):
		return "examples/" + s
	default:
		return "gnovm/stdlibs/" + s
	}
}

type result struct {
	Imports    []*ast.ImportSpec
	Translated string
}

// TODO: func TranspileFile: supports caching.
// TODO: func TranspilePkg: supports directories.

// TranspiledFilenameAndTags returns the filename and tags for transpiled files.
func TranspiledFilenameAndTags(gnoFilePath string) (targetFilename, tags string) {
	nameNoExtension := strings.TrimSuffix(filepath.Base(gnoFilePath), ".gno")
	switch {
	case strings.HasSuffix(gnoFilePath, "_filetest.gno"):
		tags = "gno && filetest"
		targetFilename = "." + nameNoExtension + ".gno.gen.go"
	case strings.HasSuffix(gnoFilePath, "_test.gno"):
		tags = "gno && test"
		targetFilename = "." + nameNoExtension + ".gno.gen_test.go"
	default:
		tags = "gno"
		targetFilename = nameNoExtension + ".gno.gen.go"
	}
	return
}

// TranspileAndCheckMempkg converts each of the files in mempkg to Go, and
// performs basic static checking through the [StaticCheck] function on each
// of these.
func TranspileAndCheckMempkg(mempkg *std.MemPackage) error {
	var errs error
	for _, mfile := range mempkg.Files {
		if !strings.HasSuffix(mfile.Name, ".gno") {
			continue // skip spurious file.
		}
		res, err := Transpile(mfile.Body, "gno,tmp", mfile.Name)
		if err != nil {
			errs = multierr.Append(errs, err)
			continue
		}
		err = StaticCheck([]byte(res.Translated))
		if err != nil {
			errs = multierr.Append(errs, err)
			continue
		}
	}

	if errs != nil {
		return fmt.Errorf("transpile package: %w", errs)
	}
	return nil
}

func Transpile(source string, tags string, filename string) (*result, error) {
	fset := token.NewFileSet()
	f, err := parser.ParseFile(fset, filename, source, parser.ParseComments)
	if err != nil {
		return nil, fmt.Errorf("parse: %w", err)
	}

	isTestFile := strings.HasSuffix(filename, "_test.gno") || strings.HasSuffix(filename, "_filetest.gno")
	rootDir := gnoenv.RootDir()
	if isTestFile {
		// XXX(morgan): this disables checking that a package exists (in examples or stdlibs)
		// when transpiling a test file. After all Gno functions, including those in
		// tests/imports.go are converted to native bindings, support should
		// be added for transpiling stdlibs only available in tests/stdlibs, and
		// enable as such "package checking" also on test files.
		rootDir = ""
	}

	transformed, err := transpileAST(fset, f, rootDir)
	if err != nil {
		return nil, fmt.Errorf("transpileAST: %w", err)
	}

	header := "// Code generated by github.com/gnolang/gno. DO NOT EDIT.\n\n"
	if tags != "" {
		header += "//go:build " + tags + "\n\n"
	}
	var out bytes.Buffer
	out.WriteString(header)
	err = format.Node(&out, fset, transformed)
	if err != nil {
		return nil, fmt.Errorf("format.Node: %w", err)
	}

	res := &result{
		Imports:    f.Imports,
		Translated: out.String(),
	}
	return res, nil
}

// StaticCheck runs checks similar to gofmt on the given file. This will perform
// a basic round of static analysis, without checking the imports.
func StaticCheck(source []byte) error {
	// TODO(morgan): we ignore the output of format.Source because we're only
	// interested in errors that may occur in the static analysis of format.Source.
	// If all we care is errors, could we use something else that avoids the "formatting"
	// part and only does a non-typed Go static check on the source?
	_, err := format.Source(source)
	return err
}

// TranspileBuildPackage tries to run `go build` against the transpiled .go files.
//
// This method is the most efficient to detect errors but requires that
// all the import are valid and available.
func TranspileBuildPackage(fileOrPkg, goBinary string) error {
	// TODO: use cmd/compile instead of exec?
	// TODO: find the nearest go.mod file, chdir in the same folder, rim prefix?
	// TODO: temporarily create an in-memory go.mod or disable go modules for gno?
	// TODO: ignore .go files that were not generated from gno?
	// TODO: automatically transpile if not yet done.

	files := []string{}

	info, err := os.Stat(fileOrPkg)
	if err != nil {
		return fmt.Errorf("invalid file or package path %s: %w", fileOrPkg, err)
	}
	if !info.IsDir() {
		file := fileOrPkg
		files = append(files, file)
	} else {
		pkgDir := fileOrPkg
		goGlob := filepath.Join(pkgDir, "*.go")
		goMatches, err := filepath.Glob(goGlob)
		if err != nil {
			return fmt.Errorf("glob %s: %w", goGlob, err)
		}
		for _, goMatch := range goMatches {
			switch {
			case strings.HasPrefix(goMatch, "."): // skip
			case strings.HasSuffix(goMatch, "_filetest.go"): // skip
			case strings.HasSuffix(goMatch, "_filetest.gno.gen.go"): // skip
			case strings.HasSuffix(goMatch, "_test.go"): // skip
			case strings.HasSuffix(goMatch, "_test.gno.gen.go"): // skip
			default:
				files = append(files, goMatch)
			}
		}
	}

	sort.Strings(files)
	args := append([]string{"build", "-v", "-tags=gno"}, files...)
	cmd := exec.Command(goBinary, args...)
	rootDir := gnoenv.RootDir()
	if err == nil {
		cmd.Dir = rootDir
	}
	out, err := cmd.CombinedOutput()
	if _, ok := err.(*exec.ExitError); ok {
		// exit error
		return parseGoBuildErrors(string(out))
	}
	return err
}

var errorRe = regexp.MustCompile(`(?m)^(\S+):(\d+):(\d+): (.+)$`)

// parseGoBuildErrors returns a scanner.ErrorList filled with all errors found
// in out, which is supposed to be the output of the `go build` command.
// Each errors are translated into their correlated gno files, by:
// - changing the filename from *.gno.gen.go to *.gno
// - shifting line number according to the added header in generated go files
// (see [Transpile] for that header).
func parseGoBuildErrors(out string) error {
	var errList goscanner.ErrorList
	matches := errorRe.FindAllStringSubmatch(out, -1)
	for _, match := range matches {
		filename := match[1]
		line, err := strconv.Atoi(match[2])
		if err != nil {
			return fmt.Errorf("parse line go build error %s: %w", match, err)
		}

		column, err := strconv.Atoi(match[3])
		if err != nil {
			return fmt.Errorf("parse column go build error %s: %w", match, err)
		}
		msg := match[4]
		errList.Add(token.Position{
			// Remove .gen.go extension, we want to target the gno file
			Filename: strings.TrimSuffix(filename, ".gen.go"),
			// Shift the 4 lines header added in *.gen.go files.
			// NOTE(tb): the 4 lines shift below assumes there's always a //go:build
			// directive. But the tags are optional in the Transpile() function
			// so that leaves some doubts... We might want something more reliable than
			// constants to shift lines.
			Line:   line - 4,
			Column: column,
		}, msg)
	}
	return errList.Err()
}

// If rootDir is given, we will check that the directory of the import path exists.
func transpileAST(fset *token.FileSet, f *ast.File, rootDir string) (ast.Node, error) {
	var errs goscanner.ErrorList

	imports := astutil.Imports(fset, f)

	// rewrite imports
	for _, paragraph := range imports {
		for _, importSpec := range paragraph {
			importPath, err := strconv.Unquote(importSpec.Path.Value)
			if err != nil {
				errs.Add(fset.Position(importSpec.Pos()), fmt.Sprintf("can't unquote import path %s: %w", importSpec.Path.Value, err))
				continue
			}

			if rootDir != "" {
				dirPath := filepath.Join(rootDir, packageDirLocation(importPath))
				if _, err := os.Stat(dirPath); err != nil {
					if !os.IsNotExist(err) {
						return nil, err
					}
					errs.Add(fset.Position(importSpec.Pos()), fmt.Sprintf("import %q does not exist", importPath))
					continue
				}
			}

			transp := TranspileImportPath(importPath)
			if !astutil.RewriteImport(fset, f, importPath, transp) {
				errs.Add(fset.Position(importSpec.Pos()), fmt.Sprintf("failed to replace the %q package with %q", importPath, transp))
			}
		}
	}

	// custom handler
	node := astutil.Apply(f,
		// pre
		func(c *astutil.Cursor) bool {
			// do things here
			return true
		},
		// post
		func(c *astutil.Cursor) bool {
			// and here
			return true
		},
	)
	return node, errs.Err()
}
